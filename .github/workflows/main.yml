name: Deploy to Heroku

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out your repository
      - name: Checkout
        uses: actions/checkout@v2

      # Step 2: Log in to Heroku CLI using HEROKU_API_KEY
      - name: Log in to Heroku CLI
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | heroku auth:token
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Step 3: Check if the Heroku app exists, if not, create it
      - name: Check if Heroku app exists
        id: heroku_app_check
        run: |
          if heroku apps:info --app ${{ secrets.HEROKU_APP_NAME }}; then
            echo "Heroku app exists."
          else
            echo "Heroku app does not exist. Creating it..."
            heroku apps:create ${{ secrets.HEROKU_APP_NAME }}
          fi
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Step 4: Set Heroku stack to container only if it's not already set
      - name: Ensure Heroku stack is set to container
        run: |
          current_stack=$(heroku stack --app ${{ secrets.HEROKU_APP_NAME }} | grep '*' | awk '{print $2}')
          if [ "$current_stack" != "container" ]; then
            echo "Current stack is $current_stack. Setting stack to container..."
            heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}
          else
            echo "App is already on the container stack."
          fi
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Step 5: Create .env file with environment variables from GitHub Secrets
      - name: Create .env file
        run: |
          echo "SNAPCHAT_USERNAME=${{ secrets.SNAPCHAT_USERNAME }}" >> .env
          echo "TELEGRAM_API_TOKEN=${{ secrets.TELEGRAM_API_TOKEN }}" >> .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> .env
          echo "DOWNLOAD_DIR=${{ secrets.DOWNLOAD_DIR }}" >> .env

      # Step 6: Build, Push and Release a Docker container to Heroku
      - name: Build, Push and Release a Docker container to Heroku
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          dockerfile_directory: ./
          dockerfile_name: Dockerfile
          docker_options: "--no-cache"
          process_type: web

      # Step 7: Log success message
      - name: Log deployment success
        if: success()  # This runs only if all previous steps were successful
        run: echo "Deployment to Heroku was successful!"

      # Step 8: Log deployment failure
      - name: Log deployment failure
        if: failure()  # This runs only if any previous steps failed
        run: echo "Deployment to Heroku failed. Please check the build logs for errors."
